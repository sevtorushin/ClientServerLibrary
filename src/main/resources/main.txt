import connection.SIBReceiverServer;
import connection.TransferClient;
import connection.WITSReceiverClient;
import entity.SIBParameter;
import service.SIBConverter;
import service.SIBStreamEmulator;

import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.stream.Stream;

public class Main {

    public static void main(String[] args) {
//        try (WITSReceiverClient receiverClient = new WITSReceiverClient("192.168.1.175", 7000)) {
//            Runnable transferToConsole = () -> {
//                try (BufferedOutputStream bos = new BufferedOutputStream(System.out, 32)) {
//                    receiverClient.writeTo(System.out);
//                    bos.flush();
//                } catch (IOException e) {
//                    e.printStackTrace();
//                }
//            };
//            Thread t1 = new Thread(transferToConsole);
//            t1.start();
        //
        //
        //            Runnable disconnect = () -> {
        //                try {
        //                    Thread.sleep(3000);
        //                    t1.interrupt();
        //                } catch (InterruptedException e) {
        //                    e.printStackTrace();
        //                }
        //            };
        //            Thread t2 = new Thread(disconnect);
        ////            t2.start();
//            t1.join();
        //            t2.join();

        //            File file = new File("E:\\witslog.txt");
        //            Runnable transferToFile = () -> {
        //                try (BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(file), 32)) {
        //                    receiverClient.writeTo(bos);
        //                    bos.flush();
        //                } catch (IOException e) {
        //                    e.printStackTrace();
        //                }
        //            };
//        } catch (InterruptedException | IOException e) {
//            e.printStackTrace();
//        }

        //        try {
        //            BufferedReader br = new BufferedReader(new InputStreamReader(is));
        //            br.lines()
        //                    .filter(s -> s.startsWith("0109"))
        //                    .map(s -> s.substring(4))
        //                    .forEach(System.out::println);
        //        } finally {
        ////            receiverClient.disconnect();
        //        }

//                try {
//                    Socket socket = new Socket("192.168.1.176",8000);
//                    OutputStream os = socket.getOutputStream();
//                    PrintWriter pw = new PrintWriter(os, true, StandardCharsets.UTF_8);
//                    String s = "&&\n" +
//                            "0805230204\n" +
//                            "0806181626\n" +
//                            "0810-999.250\n" +
//                            "0821-999.250\n" +
//                            "08235.000\n" +
//                            "082439.010\n" +
//                            "!!";
//                    String s2 = "&&\n" +
//                            "0705191008\n" +
//                            "0706165607\n" +
//                            "07070\n" +
//                            "07081755.000\n" +
//                            "0716-9999.000\n" +
//                            "0717169.000\n" +
//                            "!!";
//                    pw.println(s2);
//                } catch (IOException e) {
//                    e.printStackTrace();
//                }


//                SIBReceiverConverter converter;
//                try (SIBReceiverServer sibReceiverServer = new SIBReceiverServer(5111)) {
//        //            TransferClient.transferFromTo(sibReceiverServer.getInputStreamFromServer(), new FileOutputStream("e:\\data1.bin"));
//                    converter = new SIBReceiverConverter();
//                    byte[] b;
//                    while (true) {
//                        b = sibReceiverServer.getBufferData();
//                        System.out.println(Arrays.toString(b));
//                        System.out.println(converter.convert(b));
//        //                System.out.println(converter.convert(sibReceiverServer.getBufferData()));
//                    }
//                } catch (IOException e) {
//                    e.printStackTrace();
//                }

//        try (SIBReceiverServer sibReceiverServer = new SIBReceiverServer(1011)) {
//            while (true) {
//                byte[] arr = sibReceiverServer.getBufferData();
//                System.out.println(Arrays.toString(arr));
//            }
//        } catch (IOException e){
//            e.printStackTrace();
//        }

//                    SIBReceiverConverter converter = new SIBReceiverConverter();
//                    SIBStreamEmulator emulator = new SIBStreamEmulator(new File("e:\\data.bin"));
//                    for (int i = 0; i < 12; i++) {
//
//                        System.out.println(converter.convert(emulator.buildBinaryObject()));
//                        try {
//                            Thread.sleep(1000);
//                        } catch (InterruptedException e) {
//                            e.printStackTrace();
//                        }
//                    }

//            ServerSocket serverSocket = null;
//            Socket socket = null;
//            InputStream is = null;
//            OutputStream os = null;
//            byte[] buf = new byte[44];
//            byte[] tempBuf = new byte[44];
//
//            try {
//                serverSocket = new ServerSocket(1011);
//                while (true) {
//                    socket = serverSocket.accept();
//                    System.out.println("connected");
//                    is = socket.getInputStream();
//
//                    while (true) {
//                        is.read(buf);
//                        if (Arrays.equals(tempBuf, buf))
//                            break;
//                        for (byte b : buf) {
//                            System.out.print((b) + " ");
//                        }
//                        System.out.println();
//                        System.arraycopy(buf, 0, tempBuf, 0, buf.length);
//                        //                System.out.println(Arrays.toString(buf));
//                        //                    System.out.println(is.read());
//                    }
//                }
//
//            } catch (IOException e) {
//                e.printStackTrace();
//            }

        //        SIBStreamEmulator emulator = new SIBStreamEmulator(new File("e:\\data1.bin"));
        //        for (int i = 0; i < 500; i++) {
        //            System.out.println(Arrays.toString(emulator.buildBinaryObject()));
        //            try {
        //                Thread.sleep(20);
        //            } catch (InterruptedException e) {
        //                e.printStackTrace();
        //            }
        //        }

        ////------------------------------------------------------------------------------------------------------------
//         Чтение байтов из файла и отправка клиентом в сокет в одном потоке и чтение из сокета сервером байтов
//         во втором потоке
        Runnable receiverData = () -> {
            try (SIBReceiverServer sibReceiverServer = new SIBReceiverServer(5000)) {
                SIBReceiverConverter converter = new SIBReceiverConverter();
                byte[] tempBuf = new byte[10];
                while (true) {
                    byte[] b = sibReceiverServer.getBufferData();
                    if (Arrays.equals(b, 0, 10, tempBuf, 0, 10))
                        break;
                    SIBParameter parameter = converter.convert(b);
                    System.out.println(parameter);
                    System.arraycopy(b, 0, tempBuf, 0, 10);
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        };

        Runnable transferData = () -> {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            try (TransferClient client = new TransferClient("127.0.0.1", 5000)) {
                OutputStream os = client.getOutputStreamToServer();
                SIBStreamEmulator emulator = new SIBStreamEmulator(new File("e:\\data1.bin"));
                for (int i = 0; i < 12; i++) {
                    byte[] b = emulator.buildBinaryObject();
                    os.write(b);
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            } catch (UnknownHostException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        };

        Thread t1 = new Thread(transferData);
        Thread t2 = new Thread(receiverData);
        t1.start();
        t2.start();
        try {
            t1.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        ////------------------------------------------------------------------------------------------------------------

        //Тестовый вариант пары клиент-сервер
//        Runnable r1 = () -> {
//            try {
//                byte[] b = new byte[3];
//                ServerSocket serverSocket = new ServerSocket(5000);
//                Socket socket = serverSocket.accept();
//                for (int i = 0; i < 5; i++) {
//                    socket.getInputStream().read(b);
//                    System.out.println(Arrays.toString(b) + socket.isClosed());
//                }
//            } catch (IOException e) {
//                e.printStackTrace();
//            }
//        };
//        Runnable r2 = () -> {
//            try {
//                Socket socket = new Socket("127.0.0.1", 5000);
//                byte[] b = new byte[3];
//                for (int j = 0; j < 3; j++) {
//                    for (int i = 0; i < 3; i++) {
//                        b[i] = (byte) (Math.random() * 10);
//                    }
//                    socket.getOutputStream().write(b);
//                    Thread.sleep(1000);
//                }
//                socket.close();
//            } catch (IOException | InterruptedException e) {
//                e.printStackTrace();
//            }
//        };
//        new Thread(r1).start();
//        new Thread(r2).start();
    }
}
